global:
  company:
    name: #example
    admins:
      domain: ""
      emails: []
    domain:
      root: #example.com
      env: #int.example.com, dev.example.com, prd.example.com etc
  network:
    int_nat_gw:
  registry:
    url:
  bucket:
    prefix:
    suffix:
  ingress:
    class: pomerium
  #Cant use env: here because
  #env is already set as global
  #attr in original argocd chart
  environment:
    name: #aws-prd or aws-int or aws-stg
    server: #https://2.2.2.2
    short_name: #pre/prd/int/dev/etc

#Cant use pomerium jwt to create users in argocd
#until this is merged https://github.com/argoproj/argo-cd/pull/20928
ingresses:
  server:
    enabled: false
    name: '{{ include "argocd.fullname" . }}-srv'
    service:
      name: '{{ include "argocd.fullname" . }}-server'
      port: 80
    className: "{{ .Values.global.ingress.class }}"
    annotations:
      cert-manager.io/cluster-issuer: '{{ printf "letsencrypt-%s" .Values.global.ingress.class }}'
      ingress.pomerium.io/pass_identity_headers: 'true'
      ingress.pomerium.io/policy: |
        allow:
          or:
            {{- range $email := .Values.global.company.admins.emails }}
            - email:
                is: {{ $email }}
            {{- end }}
    hosts:
    - host: "argocd.{{ .Values.global.company.domain.env }}"
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls:
    - secretName: argocd-tls
      hosts:
      - "argocd.{{ .Values.global.company.domain.env }}"

argocd:
  enabled: false
  crds:
    install: false

  configs:
    cm:
      create: true
    params:
      server.insecure: true

  redis:
    enabled: false

  redis-ha:
    enabled: false
    hardAntiAffinity: false
    haproxy:
      hardAntiAffinity: false

  controller:
    serviceAccount:
      create: false
      name: argocd
    replicas: 1

  server:
    serviceAccount:
      create: false
      name: argocd
    replicas: 2

  repoServer:
    replicas: 2

  applicationSet:
    replicas: 1

  dex:
    enabled: false

  notifications:
    enabled: false

certificates:
  enabled: false

redis:
  enabled: false
  redisServiceMonitor:
    enabled: false
    prometheusSelector:
      prometheus: main
  sentinelServiceMonitor:
    enabled: false
    prometheusSelector:
      prometheus: main
  auth:
    secretPath: argocd-redis
  sentinel:
    replicas: 3
    exporter:
      enabled: true
      image: leominov/redis_sentinel_exporter:1.7.1
  redis:
    replicas: 3
    exporter:
      enabled: true
      image: oliver006/redis_exporter:v1.70.0
      env:
      - name: REDIS_USER
        value: default
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: redis-password
            name: argocd-redis

probes:
  enabled: false
  probes:
    argocd:
      enabled: false
      selector:
        prometheus: main
      spec:
        prober:
          url: 'prometheus-{{ .Values.global.environment.name }}-prometheus-blackbox-exporter.prometheus.svc.cluster.local:9115'
        jobName: argocd
        module: http_3xx
        targets:
          ingress:
            selector:
              matchLabels:
                app.kubernetes.io/name: 'argocd-server'
            namespaceSelector:
              any: true
