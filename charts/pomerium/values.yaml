global:
  image:
    repository: pomerium/ingress-controller
    tag: v0.29.0
  company:
    name: #example
    domain:
      root: #example.com
      env: #int.example.com, dev.example.com, prd.example.com etc
  network:
    int_nat_gw:
  registry:
    url:
  bucket:
    prefix:
    suffix:
  ingress:
    class: pomerium
  env:
    name: #aws-prd or aws-int or aws-stg
    server: #https://2.2.2.2
    short_name: #pre/prd/int/dev/etc


ingressClassName: '{{ .Values.global.ingress.class }}'

certificates:
  enabled: false
  issuers:
    selfsigned:
      enabled: false
      selfSigned: true
  certs:
    authn:
      enabled: false
      secretName: authn-tls
      dnsNames:
      - 'authn.{{ .Values.global.company.domain.env }}'
      issuerRef:
        kind: Issuer
        name: selfsigned
  cluster_issuers:
    letsencrypt:
      enabled: false
      name: '{{ printf "letsencrypt-%s" .Values.global.ingress.class }}'
      acme:
        server: https://acme-v02.api.letsencrypt.org/directory
        email: "sre@{{ .Values.global.company.domain.root }}"
        privateKeySecretRef:
          name: '{{ printf "letsencrypt-%s" .Values.global.ingress.class }}'
        solvers:
        - selector:
            dnsZones:
            #Full host name is set
            #using .Values.company.domain.env
            #variable of environment
            #argocd/environments/<env>/env.yaml
            - "{{ .Values.global.company.domain.env }}"
          http01:
            ingress:
              ingressClassName: "{{ .Values.global.ingress.class }}"


pomerium:
  name: global
  spec:
    authenticate:
      url: "https://authn.{{ .Values.global.company.domain.env }}"
    certificates:
    - '{{ .Release.Namespace }}/authn-tls'
    identityProvider:
      provider: google
      secret: '{{ .Release.Namespace }}/sso'
    secrets: '{{ .Release.Namespace }}/bootstrap'

gen-secrets:
  enabled: false
  deploymentEnabled: false
  service:
    enabled: false
  job:
    enabled: true
    args:
    - gen-secrets
    - --secrets=$(POD_NAMESPACE)/bootstrap
    environment:
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    podSecurityContext:
      fsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
  role:
    enabled: true
    rules:
    - apiGroups:
      - ""
      resources:
      - secrets
      verbs:
      - create
      - get

controller:
  enabled: false
  additionalServices:
  - name: '{{ include "common.fullname" . }}-metrics'
    enabled: true
    type: ClusterIP
    ports:
    - name: metrics
      port: 9090
      protocol: TCP
      targetPort: metrics
  args:
  - all-in-one
  - --pomerium-config=global
  - --update-status-from-service=$(POMERIUM_NAMESPACE)/pomerium-proxy
  - --metrics-bind-address=$(POD_IP):9090
  environment:
  - name: TMPDIR
    value: /tmp
  - name: XDG_CACHE_HOME
    value: /tmp
  - name: POMERIUM_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  service:
    name: pomerium-proxy
    type: LoadBalancer
    annotations:
      external-dns.alpha.kubernetes.io/hostname: "authn.{{ .Values.global.company.domain.env }}."
    externalTrafficPolicy: Local
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  ports:
  - containerPort: 8443
    name: https
    protocol: TCP
  - containerPort: 443
    name: quic
    protocol: UDP
  - containerPort: 8080
    name: http
    protocol: TCP
  - containerPort: 9090
    name: metrics
    protocol: TCP
  podSecurityContext:
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65532
  clusterRole:
    enabled: true
    rules:
    - apiGroups:
      - ""
      resources:
      - services
      - endpoints
      - secrets
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - services/status
      - secrets/status
      - endpoints/status
      verbs:
      - get
    - apiGroups:
      - networking.k8s.io
      resources:
      - ingresses
      - ingressclasses
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - networking.k8s.io
      resources:
      - ingresses/status
      verbs:
      - get
      - patch
      - update
    - apiGroups:
      - ingress.pomerium.io
      resources:
      - pomerium
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ingress.pomerium.io
      resources:
      - pomerium/status
      verbs:
      - get
      - update
      - patch
    - apiGroups:
      - ""
      resources:
      - events
      verbs:
      - create
      - patch
