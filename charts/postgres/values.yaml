global:
  image:
    tag: stub
  company:
    name: #example
    admins:
      domain: ""
      emails: []
    domain:
      root: #example.com
      env: #int.example.com, dev.example.com, prd.example.com etc
  network:
    int_nat_gw:
  registry:
    url:
  bucket:
    type:
    prefix:
    suffix:
  ingress:
    class: pomerium
  env:
    name: #aws-prd or aws-int or aws-stg
    server: #https://2.2.2.2
    short_name: #pre/prd/int/dev/etc

postgres-operator:
  enabled: false
  resources:
    limits:
      cpu: 350m
      memory: 150Mi
    requests:
      cpu: 10m
      memory: 35Mi
  configAwsOrGcp:
    wal_gs_bucket: "{{ .Values.global.bucket.prefix }}-postgres-{{ .Values.global.bucket.suffix }}"
  configLogicalBackup:
    logical_backup_provider: "{{ .Values.global.bucket.type }}"
    logical_backup_s3_bucket: "{{ .Values.global.bucket.prefix }}-postgres-backup-{{ .Values.global.bucket.suffix }}"
    logical_backup_docker_image: "{{ .Values.global.registry.url}}/pg-logical-backup:v1.14.0-1"
  # resources for logical backup pod, if empty configPostgresPodResources will be used
    logical_backup_cpu_limit: "2"
    logical_backup_cpu_request: 200m
    logical_backup_memory_limit: 500Mi
    logical_backup_memory_request: 300Mi
  configGeneral:
    enable_crd_registration: false
    docker_image: "{{ .Values.global.registry.url}}/spilo:v17.4-1"
  configMajorVersionUpgrade:
    major_version_upgrade_mode: "off"
    target_major_version: '17'
  podServiceAccount:
    name: "postgres"
  configKubernetes:
    pod_environment_configmap: postgres/postgres-pod-envs
    enable_pod_antiaffinity: true
    enable_cross_namespace_secret: false
    inherited_labels:
      - "app.kubernetes.io/instance"
      - "app.kubernetes.io/name"
      - "app.kubernetes.io/version"
    enable_owner_references: true

postgres-pod-envs:
  #This is needed by default for all wal-e cloned instances
  #Without this wal-e clone will not work due to this
  #https://github.com/zalando/spilo/blob/3.0-p1/postgres-appliance/scripts/restore_command.sh#L39
  CLONE_WALG_DOWNLOAD_CONCURRENCY: "2"

pgadmin:
  enabled: false
  image:
    repository: dpage/pgadmin4
    tag: 9.4.0@sha256:6b1c0db09695758c72abcd5160b7c4cc6d0847ab0c90a2403bdbf951f0defb5a
  environment:
    - name: PGADMIN_DEFAULT_EMAIL
      value: 'dev@{{ .Values.global.company.domain.root }}'
    - name: PGADMIN_CONFIG_WTF_CSRF_ENABLED
      value: 'False'
    - name: PGADMIN_CONFIG_ALLOW_SAVE_PASSWORD
      value: 'False'
    - name: PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED
      value: 'False'
    - name: PGADMIN_DEFAULT_PASSWORD
      value: 'this_is_a_stub_will_never_be_used'
    - name: PGADMIN_CONFIG_AUTHENTICATION_SOURCES
      value: '["webserver"]'
    - name: PGADMIN_CONFIG_WEBSERVER_REMOTE_USER
      value: '"X-Pomerium-Claim-Email"'
  ports:
    - name: http
      containerPort: 80
      protocol: TCP
  initContainers:
    volumeperm:
      image: busybox
      command: ["sh", "-c", "chown -R 5050:5050 /var/lib/pgadmin"]
  pvcs:
    configs:
      storage: 1Gi
      mountPath: /var/lib/pgadmin
  ingress:
    enabled: false
    className: "{{ .Values.global.ingress.class }}"
    annotations:
      cert-manager.io/cluster-issuer: '{{ printf "letsencrypt-%s" .Values.global.ingress.class }}'
      ingress.pomerium.io/pass_identity_headers: 'true'
      ingress.pomerium.io/policy: |
        allow:
          or:
            {{- range $email := .Values.global.company.admins.emails }}
            - email:
                is: {{ $email }}
            {{- end }}
    hosts:
      - host: 'pg.{{ .Values.global.company.domain.env }}'
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - secretName: pgadmin-tls
        hosts:
          - 'pg.{{ .Values.global.company.domain.env }}'

postgres-main:
  enabled: false
  defaultSidecars:
    enabled: true
  podMonitor:
    enabled: true
    prometheusSelector:
      prometheus: main
#######################
# Configuration example
# for 2 dbs
#######################
#  teamId: someTeam
#  replicas: 2
#  resources:
#    limits:
#      cpu: 3000m
#      memory: 12Gi
#    requests:
#      cpu: 1000m
#      memory: 3Gi
#  volume:
#    size: 10Gi
#    storageClass: premium-rwo
#  databases:
#    db1: db1_owner
#    db2: db2_owner
#  preparedDatabases:
#    db1:
#      defaultUsers: true
#      secretNamespace: app1
#      schemas:
#        public:
#          defaultRoles: false
#    db2:
#      defaultUsers: true
#      secretNamespace: app2
#      schemas:
#        public:
#          defaultRoles: false
#  logicalBackup:
#    enabled: true
#    schedule: "40 00 * * *"
#  postgresql:
#    version: "17"
#    parameters:
#      password_encryption: "scram-sha-256"
#      max_connections: "100"
#      work_mem: "65536"
#      max_wal_size: "2048"
#      maintenance_work_mem: "262144"
#      max_worker_processes: "4"
#      max_parallel_workers: "4"
#      max_parallel_workers_per_gather: "0"
#      max_parallel_maintenance_workers: "4"
#      max_standby_archive_delay: "400000"
#      max_standby_streaming_delay: "400000"
#      log_destination: "jsonlog"
#      logging_collector: "true"
