global:
  company:
    name: #example
    admins:
      domain: ""
      emails: []
    domain:
      root: #example.com
      env: #int.example.com, dev.example.com, prd.example.com etc
  network:
    int_nat_gw:
  registry:
    url:
  bucket:
    prefix:
    suffix:
  ingress:
    class: konghq
  env:
    name: #aws-prd or aws-int or aws-stg
    server: #https://2.2.2.2
    short_name: #pre/prd/int/dev/etc

kong-plugins:
  enabled: false
  plugins:
  - name: '{{ printf "prometheus-%s" .Values.global.ingress.class }}'
    plugin_name: prometheus
    global: True
    annotations:
      kubernetes.io/ingress.class: "{{ .Values.global.ingress.class }}"
    config:
      status_code_metrics: true
      latency_metrics: true
      bandwidth_metrics: true
      upstream_health_metrics: true

certificates:
  enabled: false
  issuers:
    selfsigned:
      enabled: false
      selfSigned: true
  certs:
    webhook:
      enabled: false
      secretName: webhook
      commonName: "{{ .Release.Name }}-kong-validation-webhook"
      dnsNames:
      - '{{ printf "%s-kong-validation-webhook.%s.svc" .Release.Name .Release.Namespace }}'
      - '{{ printf "%s-kong-validation-webhook.%s.svc.cluster.local" .Release.Name .Release.Namespace }}'
      issuerRef:
        kind: Issuer
        name: selfsigned
  cluster_issuers:
    letsencrypt:
      enabled: false
      name: '{{ printf "letsencrypt-%s" .Values.global.ingress.class }}'
      acme:
        server: https://acme-v02.api.letsencrypt.org/directory
        email: "sre@{{ .Values.global.company.domain.root }}"
        privateKeySecretRef:
          name: '{{ printf "letsencrypt-%s" .Values.global.ingress.class }}'
        solvers:
        - selector:
            dnsZones:
            #Full host name is set
            #using .Values.company.domain.env
            #variable of environment
            #argocd/environments/<env>/env.yaml
            - "{{ .Values.global.company.domain.env }}"
          http01:
            ingress:
              ingressClassName: "{{ .Values.global.ingress.class }}"

kong:
  enabled: true
  env:
    admin_listen: "127.0.0.1:8444 http2 ssl"
    database: "off"
    nginx_worker_processes: "1"
    nginx_main_worker_processes: "1"
    headers: "latency_tokens,X-Kong-Upstream-Status"
    nginx_upstream_keepalive_timeout: "302s"
    nginx_upstream_keepalive_requests: "1000"
    nginx_http_client_body_buffer_size: "2m"
    nginx_proxy_client_body_timeout: "302s"
    nginx_proxy_client_header_timeout: "302s"
    nginx_proxy_proxy_send_timeout: "302s"
    nginx_proxy_proxy_read_timeout: "302s"
    anonymous_reports: "off"
    admin_access_log: /dev/null
    admin_gui_access_log: /dev/stdout
    portal_api_error_log: /dev/stderr
    portal_api_access_log: /dev/stdout
    proxy_access_log: "/dev/stdout json"
    nginx_http_log_format: 'json ''{"@type": "nginx", ''
      ''"http_host": "$http_host", ''
      ''"remote_addr": "$remote_addr", ''
      ''"time_local": "$time_local", ''
      ''"request": "$request", ''
      ''"request_length": "$request_length", ''
      ''"content_length": "$content_length", ''
      ''"connection_requests": "$connection_requests", ''
      ''"status": "$status", ''
      ''"body_bytes_sent": "$body_bytes_sent", ''
      ''"http_referer": "$http_referer", ''
      ''"http_user_agent": "$http_user_agent", ''
      ''"http_x_forwarded_for": "$http_x_forwarded_for", ''
      ''"request_time": "$request_time", ''
      ''"upstream_response_time": "$upstream_response_time", ''
      ''"upstream_addr": "$upstream_addr" }'''
  proxy:
    externalTrafficPolicy: Local
    annotations:
      #external-dns.alpha.kubernetes.io/hostname
      #set in environment/values.yaml
      external-dns.alpha.kubernetes.io/ttl: "60"
  ingressController:
    ingressClass: konghq
    admissionWebhook:
      enabled: false
      failurePolicy: Fail
      port: 8080
      certificate:
        provided: true
        secretName: webhook
      namespaceSelector: {}
      annotations:
        cert-manager.io/inject-ca-from: konghq/webhook
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - topologyKey: "kubernetes.io/hostname"
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: kong

  podDisruptionBudget:
    enabled: true
    maxUnavailable: "1"

  serviceMonitor:
    # Specifies whether ServiceMonitor for Prometheus operator should be created
    enabled: true
    # interval: 10s
    # Specifies namespace, where ServiceMonitor should be installed
    # namespace: monitoring
    labels:
      prometheus: main
